import random
import string
import tkinter as tk
from tkinter import messagebox, ttk
import os


# Utilities for password generation
class PasswordGenerator:
    def __init__(self):
        self.character_sets = {
            "Lowercase Letters": string.ascii_lowercase,
            "Uppercase Letters": string.ascii_uppercase,
            "Digits": string.digits,
            "Special Characters": string.punctuation,
        }

    def generate_password(self, length, selected_sets):
        if length < 1 or not selected_sets:
            return None
        
        # Combine selected character sets
        characters = "".join(self.character_sets[set_name] for set_name in selected_sets)
        if not characters:
            return None
        
        # Ensure the password includes at least one character from each selected set
        password = [random.choice(self.character_sets[set_name]) for set_name in selected_sets]
        password += [random.choice(characters) for _ in range(length - len(password))]
        random.shuffle(password)
        return "".join(password)


# File handling utilities
class FileManager:
    def __init__(self, filename="passwords.txt"):
        self.filename = filename

    def save_password(self, site, username, password):
        try:
            with open(self.filename, "a") as file:
                file.write(f"{site},{username},{password}\n")
            return True
        except Exception as e:
            print(f"Error saving password: {e}")
            return False

    def load_passwords(self):
        if not os.path.exists(self.filename):
            return []
        with open(self.filename, "r") as file:
            lines = file.readlines()
        return [line.strip().split(",") for line in lines]


# GUI for the application
class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Advanced Password Generator")
        self.generator = PasswordGenerator()
        self.file_manager = FileManager()
        self.selected_sets = set()

        self.create_widgets()

    def create_widgets(self):
        # Title
        title = tk.Label(self.root, text="Password Generator", font=("Arial", 20, "bold"))
        title.pack(pady=10)

        # Password length selection
        length_frame = tk.Frame(self.root)
        length_frame.pack(pady=5)
        tk.Label(length_frame, text="Password Length: ").pack(side=tk.LEFT)
        self.length_var = tk.IntVar(value=12)
        length_entry = ttk.Entry(length_frame, textvariable=self.length_var, width=5)
        length_entry.pack(side=tk.LEFT)

        # Character set options
        self.checkbuttons = {}
        options_frame = tk.LabelFrame(self.root, text="Character Options")
        options_frame.pack(pady=10, padx=10, fill="both")
        for set_name in self.generator.character_sets.keys():
            var = tk.BooleanVar(value=True)
            cb = ttk.Checkbutton(
                options_frame, text=set_name, variable=var, command=self.update_selected_sets
            )
            cb.pack(anchor="w", padx=10)
            self.checkbuttons[set_name] = var

        # Generate password button
        generate_button = ttk.Button(self.root, text="Generate Password", command=self.generate_password)
        generate_button.pack(pady=10)

        # Display generated password
        self.password_var = tk.StringVar()
        password_display = ttk.Entry(self.root, textvariable=self.password_var, font=("Arial", 12), state="readonly")
        password_display.pack(pady=5, padx=10, fill="x")

        # Save password section
        save_frame = tk.LabelFrame(self.root, text="Save Password")
        save_frame.pack(pady=10, padx=10, fill="both")
        tk.Label(save_frame, text="Site/Service: ").grid(row=0, column=0, padx=5, pady=5)
        tk.Label(save_frame, text="Username: ").grid(row=1, column=0, padx=5, pady=5)
        self.site_var = tk.StringVar()
        self.username_var = tk.StringVar()
        ttk.Entry(save_frame, textvariable=self.site_var).grid(row=0, column=1, padx=5, pady=5)
        ttk.Entry(save_frame, textvariable=self.username_var).grid(row=1, column=1, padx=5, pady=5)
        save_button = ttk.Button(save_frame, text="Save Password", command=self.save_password)
        save_button.grid(row=2, column=0, columnspan=2, pady=10)

        # View saved passwords button
        view_button = ttk.Button(self.root, text="View Saved Passwords", command=self.view_saved_passwords)
        view_button.pack(pady=10)

    def update_selected_sets(self):
        self.selected_sets = {key for key, var in self.checkbuttons.items() if var.get()}

    def generate_password(self):
        length = self.length_var.get()
        if length < 1:
            messagebox.showerror("Error", "Password length must be greater than 0!")
            return

        password = self.generator.generate_password(length, self.selected_sets)
        if not password:
            messagebox.showerror("Error", "No character sets selected!")
            return

        self.password_var.set(password)

    def save_password(self):
        site = self.site_var.get()
        username = self.username_var.get()
        password = self.password_var.get()

        if not (site and username and password):
            messagebox.showerror("Error", "All fields must be filled to save a password!")
            return

        success = self.file_manager.save_password(site, username, password)
        if success:
            messagebox.showinfo("Success", "Password saved successfully!")
            self.site_var.set("")
            self.username_var.set("")
        else:
            messagebox.showerror("Error", "Failed to save the password!")

    def view_saved_passwords(self):
        passwords = self.file_manager.load_passwords()
        if not passwords:
            messagebox.showinfo("Saved Passwords", "No passwords found.")
            return

        passwords_text = "\n".join([f"Site: {site}, Username: {username}, Password: {password}" for site, username, password in passwords])
        top = tk.Toplevel(self.root)
        top.title("Saved Passwords")
        tk.Label(top, text="Saved Passwords", font=("Arial", 14, "bold")).pack(pady=10)
        text_box = tk.Text(top, wrap="word", height=15, width=50)
        text_box.insert("1.0", passwords_text)
        text_box.config(state="disabled")
        text_box.pack(pady=5, padx=10)


if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()
